# -*- coding: utf-8 -*-
"""DeepLearning_Preprocessing 12.5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uEkeOeySublcZv6NMtoctLIuIob4JbqB

# Audiobooks business case

## Preprocess the data. Balance the dataset. Create 3 datasets: training, validation, and test. Save the newly created sets in a tensor friendly format (e.g. *.npz)

There are three main steps for preprocessing the dataset:


*   Balance the dataset
*   Split the dataset into training, validation and test
*   Save the dataset as Tensor friendly format







Note that we have removed the header row, which contains the names of the categories. We simply want the data.

### Extract the data from the csv
"""

import numpy as np
from sklearn.preprocessing import StandardScaler
import pickle

from google.colab import drive
drive.mount('/content/drive')

raw_csv_data = np.loadtxt('/content/drive/My Drive/Customer Analytics/Audiobooks_data.csv', delimiter=',')

unscaled_inputs_all = raw_csv_data[:,1:-1]
targets_all = raw_csv_data[:,-1]

"""### Balance the dataset"""

#Here we balance the dataset manually instead of using Python packages.

# Count the number of targets that are 0 and number of targets that are 1. 
# Once there are as many 0s as 1s, mark entries where the target is 0.
num_one_targets = int(np.sum(targets_all))

zero_targets_counter = 0

indices_to_remove = []

for i in range(targets_all.shape[0]):
    if targets_all[i] == 0:
        zero_targets_counter += 1
        if zero_targets_counter > num_one_targets:
            indices_to_remove.append(i)
#Delete data that marked remove in the loop.
unscaled_inputs_equal_priors = np.delete(unscaled_inputs_all, indices_to_remove, axis=0)
targets_equal_priors = np.delete(targets_all, indices_to_remove, axis=0)

"""### Standardize the inputs"""

#Create standard scaler. Transform the inputs
scaler_deep_learning = StandardScaler()
scaled_inputs = scaler_deep_learning.fit_transform(unscaled_inputs_equal_priors)

"""### Shuffle the data"""

#Shuffle the data so the data would be randomly spread out
shuffled_indices = np.arange(scaled_inputs.shape[0])
np.random.shuffle(shuffled_indices)

shuffled_inputs = scaled_inputs[shuffled_indices]
shuffled_targets = targets_equal_priors[shuffled_indices]

"""### Split the dataset into train, validation, and test"""

#Split the dataset 80-10-10 as training, validation and test datasets.
samples_count = shuffled_inputs.shape[0]

train_samples_count = int(0.8 * samples_count)
validation_samples_count = int(0.1 * samples_count)

test_samples_count = samples_count - train_samples_count - validation_samples_count

train_inputs = shuffled_inputs[:train_samples_count]
train_targets = shuffled_targets[:train_samples_count]

validation_inputs = shuffled_inputs[train_samples_count:train_samples_count+validation_samples_count]
validation_targets = shuffled_targets[train_samples_count:train_samples_count+validation_samples_count]

test_inputs = shuffled_inputs[train_samples_count+validation_samples_count:]
test_targets = shuffled_targets[train_samples_count+validation_samples_count:]

#Check if the three datasets are balanced.
print(np.sum(train_targets), train_samples_count, np.sum(train_targets) / train_samples_count)
print(np.sum(validation_targets), validation_samples_count, np.sum(validation_targets) / validation_samples_count)
print(np.sum(test_targets), test_samples_count, np.sum(test_targets) / test_samples_count)

"""### Save the three datasets in *.npz"""

#Save the datasets in npz file.
np.savez('Audiobooks_data_train', inputs=train_inputs, targets=train_targets)
np.savez('Audiobooks_data_validation', inputs=validation_inputs, targets=validation_targets)
np.savez('Audiobooks_data_test', inputs=test_inputs, targets=test_targets)

"""### Save the scaler"""

#Save the scaler to apply in new data.
pickle.dump(scaler_deep_learning, open('scaler_deep_learning.pickle', 'wb'))

